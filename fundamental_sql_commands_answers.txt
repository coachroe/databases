1) List the commands for adding, updating, and deleting data.
  Adding = INSERT INTO
  Update = UPDATE (followed by SET)
  Deleting = DELETE FROM

-----

2) Explain the structure for each type of command.

  INSERT = INSERT INTO [table_name] (define columns in table)
    VALUES (csv style of values that equal number of columns defined in line above)

  UPDATE = UPDATE [table_name] SET [name_of_column] = [value]
    WHERE [whatever record you are updating]

  DELETE = DELETE FROM [table_name] WHERE [whatever record you are updating]

-----

3) What are some of the data types that can be used in tables? Give a real-world example of each type.
    integer = 55
    text = 'this is a text string'
    date = '2018-08-31'
    timestamp = '2018-08-31 00:00:00.000'

-----

4) Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

  Which data type would you use to store each of the following pieces of information?
  First and last name. = text
  Whether they sent in their RSVP. = boolean
  Number of guests. = integer
  Number of meals. = numeric

  Write a command that creates the table to track the wedding dinner.
    CREATE TABLE wedding_dinner (
      first_name text,
      last_name text,
      RSVP boolean,
      guests integer,
      meals numeric (2,1)
    );
    /* meals as numeric (2,1) if there is a large family (more than 10) */

  Write a command that adds a column to track whether the guest sent a thank you card.
    ALTER TABLE wedding_dinner
    ADD COLUMN ty_card_sent boolean SET DEFAULT FALSE;

  You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.
    ALTER TABLE wedding_dinner
    DROP COLUMN meals

  The guests will need a place to sit at the reception, so write a command that adds a column for table number.
    ALTER TABLE wedding_dinner
    ADD COLUMN table_number integer SET DEFAULT 0;

  The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.
    ALTER TABLE wedding_dinner
    DROP COLUMN table_number


-----

5) Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.
    CREATE TABLE books (
      ISBN numeric(13,0),
      title text,
      author text,
      publishing_date date,
      number_of_copies numeric (2,0),
      available_copies numeric (2,0)
    );


Find three books and add their information to the table.
    INSERT INTO books (ISBN, title, author, publishing_date, number_of_copies, available_copies)
    VALUES
    (9780451524935, '1984', 'George Orwell', '1961-01-01', 10, 10),
    (9780553380163,'A Brief History of Time', 'Stephen Hawking', '1998-09-01', 10, 10),
    (9780307387899,'The Road', 'Cormac McCarthy', '2007-03-28', 10, 10);

Someone has just checked out one of the books. Change the number of available copies to 1 fewer.
    UPDATE books
    SET available_copies = 9
    WHERE ISBN = 9780451524935

Now one of the books has been added to the banned books list. Remove it from the table.
    DELETE FROM books
    WHERE ISBN = 9780307387899

-----

6) Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. In addition to the table creation, provide commands that perform the following operations:
  CREATE TABLE spacecrafts (
    id numeric,
    name text,
    year_launched numeric,
    country_of_origin text,
    mission_description text,
    orbiting_body text,
    operating boolean,
    miles_from_earth numeric
  );

Add three non-Earth-orbiting satellites to the table.
  INSERT INTO spacecrafts (id, name, year_launched, country_of_origin, mission_description, orbiting_body, operating, miles_from_earth)
  VALUES
  (1,'Shuttle', 2016, 'United States', 'Visit Mars', 'Mars', TRUE, 5000000),
  (2,'Rover', 2017, 'Russia', 'Visit Jupiter', 'Jupiter', TRUE, 15000000),
  (3,'Explorer', 2018, 'China', 'Visit Saturn', 'Saturn', TRUE, 25000000);

Remove one of the satellites from the table since it has just crashed into the planet.
  DELETE FROM spacecrafts
  WHERE id = 1

Edit another satellite because it is no longer operating and change the value to reflect that.

  UPDATE spacecrafts
  SET operating = FALSE
  WHERE id = 3

-----

7) Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. Also provide commands that perform the following operations:
  CREATE TABLE emails (
    id numeric,
    subject_line text,
    sender text,
    additional_recipients text,
    email_body text,
    timestamp timestamp,
    email_read boolean,
    email_chain_id numeric
  );


Add three new emails to the inbox.
  INSERT INTO emails (id, subject_line, sender, additional_recipients, email_body, timestamp, email_read, email_chain_id)
  VALUES
  (1, 'Hello', 'john@gmail.com', 'steve@gmail.com', 'How are you?  Let me know!', '2018-01-01 00:00:00.000', FALSE, 1),
  (2, 'Yo', 'bill@gmail.com', 'ryan@gmail.com, melissa@gmail.com', 'What have you been up to?', '2018-07-01 00:00:00.000', FALSE, 3),
  (3, 'Hola', 'juan@gmail.com', 'halle@gmail.com', 'Coming to the concert Saturday?', '2018-12-01 00:00:00.000', FALSE, 5);

You deleted one of the emails, so write a command to remove the row from the inbox table.
  DELETE FROM emails
  WHERE id = 1

You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.
  UPDATE emails
  SET email_read = FALSE
  WHERE id = 3
